uses Math,SysUtils;
type mass=array[0..6000] of longint;
     maxx=array[0..3000,0..3000] of int64;
     majj=array[0..6000] of int64;
var n,a,b,c:longint;kol2,e,g,xv,l,k,j,kol,i,z:longint;
    m,used,m6,used1,och,pred,q,m5,m4:mass;
    m3:maxx;
    ch:char;
    res:int64;
    d,m1:majj;
procedure add(i,j,z:longint);
Begin
   inc(kol);
   m[kol]:=j;
   m1[kol]:=z;
   pred[kol]:=q[i];
   q[i]:=kol;
end;
procedure dfs(x,b:longint;w:int64);
var j:longint;
Begin
   j:=q[x];
   m3[i,x]:=w;
   while j>0 do
      Begin
         if (b<>m[j])
         then dfs(m[j],x,w+m1[j]);
         j:=pred[j];
      end;
end;
procedure swap(var a,b:longint);
var c:longint;
Begin
   c:=a;
   a:=b;
   b:=c;
end;
procedure qsort(var m:mass);
procedure sort(l,r:longint);
var i,j,x:longint;
Begin
   i:=l;
   j:=r;
   x:=m[l+random(r-l)];
   repeat
      while m[i]<x do
         inc(i);
      while m[j]>x do
         dec(j);
      if i<=j
      then Begin
              swap(m[i],m[j]);
              swap(m4[i],m4[j]);
              inc(i);
              dec(j);
           end;
   until i>j;
   if l<j
   then sort(l,j);
   if i<r
   then sort(i,r);
end;
Begin
   sort(1,n);
end;
procedure putq(x:longint);
Begin
   inc(g);
   och[g]:=x;
   inc(l);
end;
procedure getq(var x:longint);
Begin
   x:=och[xv];
   inc(xv);
   dec(l);
end;
procedure bfs(x:longint);
Begin
   l:=0;
   g:=0;
   xv:=1;
   putq(x);
   used1[x]:=1;
   m5[x]:=1;
   while l>0 do
      Begin
         getq(e);
{         inc(kol2);
         m6[kol2]:=e; }
         for z:=1 to n do
            if (used1[z]=0) and (m3[e,z]<=d[e])
            then Begin
                    used1[z]:=1;
                    inc(m5[x]);
                    putq(z);
                 end;
      end;
end;
begin
   assign(input,'alarm.in');
   assign(output,'alarm.out');
//   assign(input,'input.txt');
//   assign(output,'output.txt');
   reset(input);
   rewrite(output);
   readln(n);
   for i:=1 to n do
      read(d[i]);
   readln;
   kol:=0;
   for i:=1 to n-1 do
     Begin
        readln(a,b,c);
        add(a,b,c);
        add(b,a,c);
     end;
   for i:=1 to n do
      dfs(i,0,0);
   res:=0;
   for i:=1 to n do
     if used1[i]=0
     then Begin
            m4[i]:=i;
            kol2:=0;
            inc(res);
            bfs(i);
            {for z:=1 to kol2 do
               m5[m6[z]]:=m5[i];}
          end;
   writeln(res);{
   qsort(m5);
   res:=0;
   fillchar(used1,sizeof(used1),0);
   for i:=n downto 1 do
       if used1[m4[i]]=0
       then Begin
               inc(res);
               bfs(m4[i]);
            end;
   writeln(res); }
end.
