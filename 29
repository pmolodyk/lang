program zad_8;

{$APPTYPE CONSOLE}

uses
  SysUtils, Math;
var
  n, i, a, b, l, res, step, k, j : integer;
  ar, use : array[1 .. 3000] of integer;
  ar1 : array[1 .. 3000, 1 .. 3000] of int64;

procedure dfs(x : integer);
  var
    i : integer;
  begin
    use[x] := 1;
    for i := 1 to n do
      if(ar1[x, i] > -1) and (use[i] = 0) and (ar1[x, i] <= ar[x]) then
        dfs(i);
  end;

function get(x : integer):integer;
  var
    i, step, kol, res : integer;
  begin
    for i := 1 to n do
      use[i] := 0;
    res := 0;

    step := 1;
    for i := 1 to n do begin
      if(step and x = step)then begin
        if(use[i] = 0) then
          dfs(i);
        inc(res);
      end;
      step := step * 2;
    end;

    kol := 0;
    for i := 1 to n do
      inc(kol, use[i]);

    if(kol = n) then
      get := res
    else
      get := n;
  end;
begin
  reset(input, 'alarm.in');
  rewrite(output, 'alarm.out');

  readln(n);

  for i := 1 to n do
    for j := 1 to n do
      ar1[i, j] := -1;

  for i := 1 to n do begin
    read(ar[i]);
    ar1[i, i] := 0;
  end;
  for i := 1 to n - 1 do begin
    readln(a, b, l);
    ar1[a, b] := l;
    ar1[b, a] := l;
  end;
  
  for k := 1 to n do
    for i := 1 to n do
      for j := 1 to n do
        if (i <> j) and (ar1[i, k] > -1) and (ar1[k, j] > -1) and ((ar1[i, j] = -1) or (ar1[i, j] > ar1[i, k] + ar1[k, j])) then
          ar1[i, j] := ar1[i, k] + ar1[k, j];


  res := n;
  step := 1;
  for i := 1 to n do
    step := step * 2;


  for i := 1 to step - 1 do
    res := min(res, get(i));

  writeln(res);
  readln(n);
end.

10
1 2 2 2 6 3 4 5 4 3
1 2 5
2 3 1
2 4 5
4 5 2
4 6 4
4 7 3
1 8 1
8 9 5
8 10 4